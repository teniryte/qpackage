#!/usr/bin/env node
// @ts-nocheck
'use strict';

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const childProcess = require('child_process');
const xyaml = require('xyaml');

start()
  .then(() => {})
  .catch(err => console.log('Error:', err))
  .finally(() => {
    process.exit(1);
  });

async function start() {
  const options = await getOptions();
  createDir(options);
  createPackage(options);
  createFiles(options);
  createBin(options);
  createLib(options);
  createTest(options);
  installDependencies(options);
  setupRepository(options);
}

async function getOptions() {
  let rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    }),
    defaultOptions = getDefaultOptions(),
    name = await question(
      'Package name',
      process.argv[2] || defaultOptions.name
    ),
    argvDependencies = process.argv.slice(3),
    options = mergeOptions(defaultOptions, {
      parentDir: process.cwd(),
      name: name,
      scope: await question('Scope', defaultOptions.scope),
      authorUsername: await question(
        'Author username',
        defaultOptions.authorUsername
      ),
      authorEmail: await question('Author email', defaultOptions.authorEmail),
      year: new Date().getFullYear(),
      version: await question('Version', defaultOptions.version || '0.0.1'),
      description: await question('Description', defaultOptions.description),
      keywords: (await question('Keywords', defaultOptions.keywords))
        .split(' ')
        .map(word => word.trim())
        .filter(word => !!word),
      homepage: await question('Homepage', defaultOptions.homepage),
      license: await question('License', defaultOptions.LICENSE || 'MIT'),
      repository: await question(
        'Repository',
        `git@${defaultOptions.repo.host}:` +
          `${defaultOptions.repo.user}/` +
          `${name}.git`
      ),
      dependencies: (
        await question(
          'Dependencies',
          (argvDependencies.length && argvDependencies) ||
            defaultOptions.dependencies
        )
      )
        .split(' ')
        .map(dep => dep.trim())
        .filter(dep => !!dep),
      devDependencies: (
        await question('Dev dependencies', defaultOptions.devDependencies)
      )
        .split(' ')
        .map(dep => dep.trim())
        .filter(dep => !!dep),
      bin:
        (await question('Generate binary script? Yes/No', defaultOptions.bin))
          .trim()
          .toLowerCase()[0] === 'y',
      publish:
        (
          await question(
            'Publish packages automatically? Yes/No',
            defaultOptions.publish
          )
        )
          .trim()
          .toLowerCase()[0] === 'y',
      registry: await question(
        'Registry',
        defaultOptions.registry || 'https://registry.npmjs.org'
      ),
    });

  return options;

  function question(question = '', defaultValue = '') {
    let message = `${question}${defaultValue ? ` (${defaultValue})` : ''}: `;
    return new Promise((resolve, reject) => {
      rl.question(message, value => {
        resolve(value || defaultValue || '');
      });
    });
  }
}

function setupRepository(options) {
  if (!options.repository) return options;
  let execOptions = {
      cwd: options.dir,
      stdio: 'inherit',
    },
    packageData = require(path.resolve(options.dir, 'package.json')),
    version = packageData.version,
    commands = [
      `git init`,
      `git remote add origin ${options.repository}`,
      `git add . --all`,
      `git commit -m 'Init'`,
      `git push -u origin master`,
      options.publish ? `yarn publish --new-version ${version}` : null,
    ];
  commands
    .filter(command => !!command)
    .forEach(command => {
      childProcess.execSync(command, execOptions);
    });
}

function installDependencies(options) {
  if (!options.dependencies.length) return options;
  childProcess.execSync(`yarn add ${options.dependencies.join(' ')}`, {
    cwd: path.resolve(options.dir),
    stdio: 'inherit',
  });
}

function createTest(options) {
  fs.mkdirSync(path.resolve(options.dir, 'test'));
  fs.writeFileSync(
    path.resolve(options.dir, `test/index.js`),
    `'use strict';\n`
  );
}

function createLib(options) {
  fs.mkdirSync(path.resolve(options.dir, 'lib'));
  fs.writeFileSync(
    path.resolve(options.dir, `lib/index.js`),
    `'use strict';\n\nmodule.exports = {\n\n};`
  );
}

function createBin(options) {
  if (!options.bin) return options;
  let filename = path.resolve(options.dir, `bin/${options.name}`);
  fs.mkdirSync(path.resolve(options.dir, 'bin'));
  fs.writeFileSync(filename, `#!/usr/bin/env node\n'use strict';\n`);
  fs.chmodSync(filename, 0o777);
}

function createFiles(options) {
  let files = fs.readdirSync(path.resolve(__dirname, '../template'));
  files.forEach(file => {
    fs.writeFileSync(
      path.resolve(options.dir, file),
      fs
        .readFileSync(path.resolve(__dirname, '../template', file), 'utf-8')
        .replace(/\{\{name\}\}/gim, options.name)
        .replace(/\{\{description\}\}/gim, options.description)
        .replace(/\{\{authorUsername\}\}/gim, options.authorUsername)
        .replace(/\{\{authorEmail\}\}/gim, options.authorEmail)
    );
  });
  fs.renameSync(
    path.resolve(options.dir, 'gitignore'),
    path.resolve(options.dir, '.gitignore')
  );
}

function createDir(options) {
  let dir = path.resolve(options.parentDir, options.name);
  if (fs.existsSync(dir)) {
    return console.log(`Directory «${dir}» already exists!`);
  }
  fs.mkdirSync(dir);
  options.dir = dir;
  return dir;
}

function createPackage(options) {
  let data = getPackage(options);
  fs.writeFileSync(
    path.resolve(options.dir, 'package.json'),
    JSON.stringify(data, null, 2)
  );
}

function getPackage(options) {
  let data = {
    name: options.scope ? `${options.scope}/${options.name}` : options.name,
    version: options.version,
    main: './lib/index.js',
    description: options.description,
    keywords: options.keywords,
    homepage: options.homepage,
    license: options.license,
    dependencies: {},
    devDependencies: {
      jest: '^26.6.3',
    },
    scripts: {
      test: 'node ./node_modules/.bin/jest',
    },
    author: {
      name: options.authorUsername,
      email: options.authorEmail,
    },
    repository: {
      type: 'git',
      url:
        options.repository ||
        `git@${options.repo.host}:` +
          `${options.repo.user}/` +
          `${options.name}.git`,
    },
    publish: !!options.publish,
    publishConfig: {
      registry: options.registry || 'https://registry.npmjs.org/',
    },
  };
  if (options.bin) {
    data.bin = {
      [options.name]: `./bin/${options.name}`,
    };
  }
  return data;
}

function mergeOptions(...datas) {
  let options = {};
  datas.forEach(data => {
    Object.keys(data).forEach(key => {
      let value = data[key];
      if (value === undefined) return;
      options[key] = value;
    });
  });
  return options;
}

function getDefaultOptions() {
  let options = {},
    dir = process.cwd(),
    homeOptions = path.resolve(process.env.HOME, '.qpackage.yaml'),
    files = fs.existsSync(homeOptions) ? [homeOptions] : [];
  while (dir !== '/' && fs.existsSync(dir) && fs.statSync(dir).isDirectory()) {
    let filename = path.resolve(dir, '.qpackage.json');
    dir = path.resolve(dir, '..');
    if (!fs.existsSync(filename) || !fs.statSync(filename)) continue;
    files.unshisf(filename);
  }
  files.forEach(filename => {
    Object.assign(options, xyaml.loadFile(filename));
  });
  return options;
}
